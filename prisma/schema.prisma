// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[] // <-- jouw extra tabel voor films
  watchlist     Watchlist[]
  ratings       Rating[]
  uploads       Upload[]
  comments      Comment[]
createdAt DateTime @default(now())
updatedAt DateTime @default(now()) @updatedAt  
  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  movieId    Int
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  
  @@unique([userId, movieId])
}

model Watchlist {
  id         String   @id @default(cuid())
  userId     String
  movieId    Int
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  @@unique([userId, movieId], name: "userId_movieId") 
}

model Movie {
  id         Int       @id        // TMDB movieId
  title      String
  posterPath String?
  releaseDate DateTime?
  ratings    Rating[]
  favorites  Favorite[]   // ðŸ‘ˆ backlink naar Favorite
  watchlists Watchlist[] 
  comments   Comment[] // ðŸ‘ˆ backlink naar Watchlist

}
model Rating {
  id        String   @id @default(cuid())
  userId    String
  movieId   Int
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId]) // Ã©Ã©n rating per user per film
}
model Comment {
  id        String   @id @default(cuid())
  userId    String
  movieId   Int
  body      String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id])
}
model Upload {
  id        String   @id @default(cuid())
  userId    String
  url       String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}